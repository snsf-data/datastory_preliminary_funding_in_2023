---
title: "`r params$title`"
format:
  html:
    # To use instead of self-contained that has been deprecated
    # Using custom page layout (via 'style.css')
    # Open link in a new window by default
    # Display footnotes in pop-up window when hovering on it
    toc: false
    css: ["style.css"]
    mainfont: Theinhardt
    fontsize: "16px"
    embed-resources: true
    page-layout: custom
    link-external-newwindow: true
    footnotes-hover: true
params:
  title: ""
  publication_date: ""
  lang: "fr"
  doi: ""
  github_url: ""
editor_options: 
  chunk_output_type: console
---

```{r general-setup}
#| include: false

## This file contains the ENGLISH version of the data story

# Set general chunk options
knitr::opts_chunk$set(
  echo = FALSE,
  fig.showtext = TRUE,
  fig.retina = 3,
  fig.align = "center",
  warning = FALSE,
  message = FALSE
)

# Install snf.datastory package if not available, otherwise load it
if (!require("snf.datastory")) {
  if (!require("devtools")) {
    install.packages("devtools")
    library(devtools)
  }
  install_github("snsf-data/snf.datastory")
  library(snf.datastory)
}

# Load packages
library(tidyverse)
library(lubridate)
library(scales)
library(conflicted)
library(jsonlite)
library(here)
library(glue)
library(ggiraph)
library(showtext)
library(systemfonts)
library(patchwork)

# Conflict preferences
conflict_prefer("filter", "dplyr")
conflict_prefer("get_datastory_theme", "snf.datastory")
conflict_prefer("get_datastory_scheme", "snf.datastory")

source("R/make_desktop_plot.R")
source("R/make_mobile_plot.R")
source("R/prep_data.R")

is_theinhardt_available <- file.exists(here("fonts", "TheinhardtReg.otf"))

if (is_theinhardt_available) {
  
  sysfonts::font_add(
    family = "Theinhardt",
    regular = here("fonts", "TheinhardtReg.otf"),
    bold = here("fonts", "TheinhardtBold.otf"),
    bolditalic = here("fonts", "TheinhardtBoldIt.otf"),
    italic = here("fonts", "TheinhardtRegIt.otf"),
  )
  
  # Need to register the font to allow its use by ggiraph when creating SVG
  # files.
  if (!font_family_exists("Theinhardt")) {
    
    # Register existing/downloaded fonts
    register_font(
      name = "Theinhardt",
      plain = list("fonts/TheinhardtReg.otf", 0),
      bold = list("fonts/TheinhardtBold.otf", 0),
      italic = list("fonts/TheinhardtRegIt.otf", 0),
      bolditalic = list("fonts/TheinhardtBoldIt.otf", 0)
    )
  }
  
  font <- "Theinhardt"
  
} else {
  
  font <- "Arial"
  
}

# Need if we want to use the registered font in ggiraph plots
showtext_auto()

# Increase showtext package font resolution
showtext_opts(dpi = 320)

# Set the locale for date formatting (Windows)
Sys.setlocale(
  "LC_TIME",
  switch(
    params$lang,
    en = "English",
    de = "German",
    fr = "French"
  )
)

# Create function to print number with local language-specific format
print_num <- function(x) snf.datastory::print_num(x, lang = params$lang)

# Knitr hook for local formatting of printed numbers
knitr::knit_hooks$set(
  inline <- function(x) {
    if (!is.numeric(x)) {
      x
    } else {
      print_num(x)
    }
  }
)

# Function that returns the desired language version of a string, given three
# language strings are provided to the function.
translate <- function(en_string = "NOT TRANSLATED",
                      de_string = "NOT TRANSLATED",
                      fr_string = "NOT TRANSLATED",
                      lang = "fr") {
  
  string <-
    case_when(
      lang == "en" ~ en_string, 
      lang == "de" ~ de_string, 
      lang == "fr" ~ fr_string, 
      TRUE ~ "NO VALID LANGUAGE SPECIFIED"
    )
  
  return(string)
  
}

```

```{r print-header-infos}
#| results: asis

# Add publication date to header
cat(format(as_datetime(params$publication_date), "%d.%m.%Y"))
```

```{r story-specific-setup}
#| include: false

# Load data about funding in 2023
funding_in_2023 <- 
  read_csv(here("data", "prelim_funding_in_2023_2024-02-16.csv"))

# Übergangsmassnahmen Horizon Europe
# Get the amount going to Horizon Transitional Measures
horizon_measures <-
  funding_in_2023 |> 
  filter(str_detect(FundingInstrumentGaReporting, "Horizon")) |> 
  summarise(sum_amount = sum(AmountGranted)) |> 
  pull()

amount_by_institution <-
  funding_in_2023 |>
  summarise(
    AmountGranted = paste0(round(sum(AmountGranted) / 1000000), " Mio. CHF"),
    .by = ResearchInstitutionType
  )

total_no_he <-
  funding_in_2023 |>
  filter(!str_starts(FundingInstrumentGaReporting, "Horizon")) |>
  summarise(sum = round(sum(AmountGranted) / 1000000)) |>
  pull(sum)

total_projects <-
  funding_in_2023 |>
  filter(FundingInstrumentGaLevel1 == "Projects") |>
  summarise(sum = round(sum(AmountGranted) / 1000000)) |>
  pull(sum)

total_careers <-
  funding_in_2023 |>
  filter(FundingInstrumentGaLevel1 == "Careers") |>
  summarise(sum = round(sum(AmountGranted) / 1000000)) |>
  pull(sum)

total_prog <-
  funding_in_2023 |>
  filter(
    FundingInstrumentGaLevel1 == "Programmes",
    !str_starts(FundingInstrumentGaReporting, "Horizon")
  ) |>
  summarise(sum = round(sum(AmountGranted) / 1000000)) |>
  pull(sum)

total_he <-
  funding_in_2023 |>
  filter(str_starts(FundingInstrumentGaReporting, "Horizon")) |>
  summarise(sum = round(sum(AmountGranted) / 1000000)) |>
  pull(sum)

```


<!-- Short lead (2-3 sentences) in bold -->

**Premiers chiffres provisoires : en 2023, le FNS a investi `r total_no_he` millions de francs dans le cadre de ses instruments d’encouragement réguliers. Nous avons également alloué `r total_he` millions aux mesures transitoires Horizon Europe.**


`r total_projects` millions de francs ont été consacrés à l’encouragement de projets qui donne l’opportunité aux chercheuses et chercheurs expérimentés de réaliser leurs propres idées. Nous avons accordé environ `r total_prog` millions pour le travail des groupes de recherche dans les programmes et `r total_careers` millions pour les chercheuses et chercheurs de la relève dans les instruments d’encouragement de carrière. 

La Suisse n’est pas associée à Horizon Europe, le programme de l’UE pour la recherche et l’innovation. C’est pourquoi le FNS a accordé l’année dernière `r total_he` millions de francs pour des projets dans le cadre de mesures transitoires. Le budget de l’instrument d’encouragement Eccellenza, que nous avons intégré aux mesures transitoires, y est également inclus. Ces mesures profitent aussi bien aux scientifiques de la relève qu’aux chercheuses et chercheurs confirmés. 

En outre, le FNS verse aux hautes écoles environ 130 millions de francs pour l’indemnisation des coûts indirects de la recherche (overhead), qui sont générés en raison des nouveaux projets. 

Fin 2023, `r print_num(5673)` projets que nous soutenons étaient en cours, impliquant environ `r print_num(21000)` chercheuses et chercheurs dans les hautes écoles et d’autres institutions. La plupart des projets courent sur plusieurs années.

::: {.hide-mobile .hide-tablet .widemedia}
::: plot-box
::: plot-title
Montants des encouragements FNS approuvés en 2023 (chiffres provisoires)
:::
```{r plot-desktop-1}
#| out-width: "100%"
#| fig-height: 3

# Create ggiraph object
girafe(
  ggobj = draw_funding_portfolio_5(params$lang), 
  height_svg = 3, 
  options = list(
    opts_toolbar(saveaspng = FALSE),
    opts_hover(css = "fill:#F08262;stroke:#F08262;"),
    opts_tooltip(
      css = get_ggiraph_tooltip_css(),
      opacity = 0.8,
      delay_mouseover = 0,
      delay_mouseout = 0
    )
  )
)

```

```{r plot-desktop-2}
#| out-width: "100%"
#| fig-height: 1.8

# Create ggiraph object
girafe(
  ggobj = draw_funding_portfolio_5_horizon(params$lang), 
  height_svg = 1.8, 
  options = list(
    opts_toolbar(saveaspng = FALSE),
    opts_hover(css = "fill:#F08262;stroke:#F08262;"),
    opts_tooltip(
      css = get_ggiraph_tooltip_css(),
      opacity = 0.8,
      delay_mouseover = 0,
      delay_mouseout = 0
    )
  )
)

```
::: caption
Données : subsides FNS accordés en 2023 (chiffres provisoires, état au 16 février 2024). Sans indemnisation des coûts indirects de la recherche des hautes écoles (130 millions de CHF) et sans les subsides pour les articles de revues en Open Access (4 millions de CHF).
:::
:::
:::

::: hide-desktop
::: plot-box
::: plot-title
Montants des encouragements FNS approuvés en 2023 (chiffres provisoires)
:::
```{r example-plot-2-mobile}
#| out-width: "100%"
#| fig-height: 10

# Create ggiraph object
girafe(
  ggobj = draw_funding_portfolio_5_mob(params$lang),
  height_svg = 10,
  options = list(
    opts_toolbar(saveaspng = FALSE),
    opts_hover(css = "fill:#F08262;stroke:#F08262;"),
    opts_tooltip(
      css = get_ggiraph_tooltip_css(),
      opacity = 0.8,
      delay_mouseover = 0,
      delay_mouseout = 0
    )
  )
)

```
::: caption
Données : subsides FNS accordés en 2023 (chiffres provisoires, état au 16 février 2024). Sans indemnisation des coûts indirects de la recherche des hautes écoles (130 millions de CHF) et sans les subsides pour les articles de revues en Open Access (4 millions de CHF).
:::
:::
:::

Les données, le texte et le code de ce récit de données sont [disponibles sur Github](`r params$github_url`) et [archivés sur Zenodo](`r params$doi`). <br>DOI: `r str_remove(params$doi, "https://doi.org/")`

```{r prevent-internal-snsf-packages, include=FALSE}
#| include: false

# Internal SNSF packages must not be used in data stories, as their
# pre-processing functions are internal and the corporate design differs from
# the data portal.
if (any(c("snfverse", "snf.preprocessing", "snf.plot") %in% 
        loadedNamespaces())) {
  stop(glue(
    "You must not use internal SNSF packages in data stories.",
    " Please resort to snf.datastory."
  ))
}
```
